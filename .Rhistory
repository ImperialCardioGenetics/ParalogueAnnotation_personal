protein_genes_w_paralogues[protein_genes_w_paralogues$external_gene_name == protein_genes_w_paralogues_genes[1]]
protein_genes_w_paralogues[,protein_genes_w_paralogues$external_gene_name == protein_genes_w_paralogues_genes[1]]
protein_genes_w_paralogues[protein_genes_w_paralogues$external_gene_name == protein_genes_w_paralogues_genes[1],]
protein_genes_w_paralogues[protein_genes_w_paralogues$external_gene_name == protein_genes_w_paralogues_genes,]
protein_genes_w_paralogues[protein_genes_w_paralogues$external_gene_name %in% protein_genes_w_paralogues_genes,]
protein_genes_w_paralogues_genes = data.frame(as.list(unique(protein_genes_w_paralogues$external_gene_name)))
clinvar_P_LP_tableized_genes = data.frame(as.list(unique(clinvar_P_LP_tableized$SYMBOL)))
protein_genes_w_para_and_clinvar_P_LP_genes = inner_join(protein_genes_w_paralogues, clinvar_P_LP_tableized_genes)
View(protein_genes_w_paralogues)
View(protein_genes_w_paralogues_genes)
protein_genes_w_paralogues_genes
protein_genes_w_paralogues_genes = data.frame(lapply(unique(protein_genes_w_paralogues$external_gene_name), type.convert), stringsAsFactors = FALSE)
protein_genes_w_paralogues_genes
protein_genes_w_paralogues_genes[1]
protein_genes_w_paralogues_genes[2]
protein_genes_w_paralogues_genes[1,1]
?head
head(protein_genes_w_paralogues_genes)
protein_genes_w_paralogues_genes = data.frame(as.list(unique(protein_genes_w_paralogues$external_gene_name)))
colnames(protein_genes_w_paralogues_genes)
?data.frame
dim(protein_genes_w_paralogues_genes)
rownames(protein_genes_w_paralogues_genes)
clinvar_P_LP_tableized_genes = data.frame(as.list(unique(clinvar_P_LP_tableized$SYMBOL)))
rownames(clinvar_P_LP_tableized_genes)
protein_genes_w_paralogues_genes = t(protein_genes_w_paralogues_genes)
protein_genes_w_paralogues_genes
rownames(protein_genes_w_paralogues_genes)
colnames(protein_genes_w_paralogues_genes)
View(protein_genes_w_paralogues_genes)
class(protein_genes_w_paralogues_genes)
colnames(protein_genes_w_paralogues_genes) = "gene"
protein_genes_w_paralogues_genes
colnames(protein_genes_w_paralogues_genes)
View(protein_genes_w_paralogues_genes)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = data.frame(as.list(unique(protein_genes_w_paralogues$external_gene_name)))
protein_genes_w_paralogues_genes = t(protein_genes_w_paralogues_genes)
colnames(protein_genes_w_paralogues_genes) = "Gene"
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = unique(protein_genes_wo_paralogues$external_gene_name)
# length(protein_genes_wo_paralogues)
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = data.frame(as.list(unique(clinvar_P_LP_tableized$SYMBOL)))
clinvar_P_LP_tableized_genes = t(clinvar_P_LP_tableized_genes)
colnames(clinvar_P_LP_tableized_genes) = "Gene"
protein_genes_w_para_and_clinvar_P_LP_genes = inner_join(protein_genes_w_paralogues, clinvar_P_LP_tableized_genes, by = "Gene")
class(clinvar_P_LP_tableized_genes)
class(protein_genes_w_paralogues_genes)
protein_genes_w_paralogues_genes = as.data.frame(t(protein_genes_w_paralogues_genes))
colnames(protein_genes_w_paralogues_genes) = "Gene"
protein_genes_w_paralogues_genes = data.frame(as.list(unique(protein_genes_w_paralogues$external_gene_name)))
protein_genes_w_paralogues_genes = as.data.frame(t(protein_genes_w_paralogues_genes))
colnames(protein_genes_w_paralogues_genes) = "Gene"
clinvar_P_LP_tableized_genes = data.frame(as.list(unique(clinvar_P_LP_tableized$SYMBOL)))
clinvar_P_LP_tableized_genes = as.data.frame(t(clinvar_P_LP_tableized_genes))
colnames(clinvar_P_LP_tableized_genes) = "Gene"
protein_genes_w_para_and_clinvar_P_LP_genes = inner_join(protein_genes_w_paralogues, clinvar_P_LP_tableized_genes, by = "Gene")
protein_genes_w_paralogues_genes = data.frame(as.list(unique(protein_genes_w_paralogues$external_gene_name)))
protein_genes_w_paralogues_genes
protein_genes_w_paralogues_genes = unique(protein_genes_w_paralogues$external_gene_name)
for (gene in protein_genes_w_paralogues_genes){
print(gene)
}
protein_genes_w_paralogues_genes
count = 0
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
count = count + 1
}
}
count
protein_genes_w_paralogues_genes
length(protein_genes_w_paralogues_genes)
protein_genes_w_paralogues_genes[1]
protein_genes_w_paralogues_genes[2]
class(protein_genes_w_paralogues_genes)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = unique(protein_genes_wo_paralogues$external_gene_name)
# length(protein_genes_wo_paralogues)
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
# clinvar_P_LP_tableized_genes = as.data.frame(t(clinvar_P_LP_tableized_genes))
# colnames(clinvar_P_LP_tableized_genes) = "Gene"
count = 0
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
count = count + 1
}
}
count
length(clinvar_P_LP_tableized_genes)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = unique(protein_genes_wo_paralogues$external_gene_name)
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
# clinvar_P_LP_tableized_genes = as.data.frame(t(clinvar_P_LP_tableized_genes))
# colnames(clinvar_P_LP_tableized_genes) = "Gene"
clinvar_genes_w_paralogs = vector()
clinvar_genes_wo_paralogs = vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_genes_w_paralogs = c(gene, clinvar_genes_w_paralogs)
} else {
clinvar_genes_wo_paralogs = c(gene, clinvar_genes_wo_paralogs)
}
}
clinvar_genes_wo_paralogs
#noQC
#pathogenic to pathogenic
p.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
# p.paralogous_var_align = Paralogous_var_align("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_20171029_onlyPathogenic.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_20171029_onlyPathogenic.out_paraloc_tableized")
#benign to pathogenic
b.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
#stats
conf = conf_matrix(p.paralogous_var_align$num_of_paralog_anno, p.paralogous_var_align$paralog_data, b.paralogous_var_align$num_of_paralog_anno, b.paralogous_var_align$paralog_data)
#para_con
p2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf2 = conf_matrix(p2.paralogous_var_align$num_of_paralog_anno, p2.paralogous_var_align$paralog_data, b2.paralogous_var_align$num_of_paralog_anno, b2.paralogous_var_align$paralog_data)
#all_con
p3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf3 = conf_matrix(p3.paralogous_var_align$num_of_paralog_anno, p3.paralogous_var_align$paralog_data, b3.paralogous_var_align$num_of_paralog_anno, b3.paralogous_var_align$paralog_data)
#alt_con
#pathogenic to pathogenic
p4.Total_paralog_annotations = p3.paralogous_var_align$Total_paralog_annotations[p3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==p3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
# p4.Total_paralog_annotations = p4.Total_paralog_annotations[!duplicated(p4.Total_paralog_annotations$ID.x),]
p4.num_of_paralog_anno = sum(!is.na(p4.Total_paralog_annotations$ID.y))
#benign to pathogenic
b4.Total_paralog_annotations = b3.paralogous_var_align$Total_paralog_annotations[b3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==b3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
# b4.Total_paralog_annotations = b4.Total_paralog_annotations[!duplicated(b4.Total_paralog_annotations$ID.x),]
b4.num_of_paralog_anno = sum(!is.na(b4.Total_paralog_annotations$ID.y))
conf4 = conf_matrix(p4.num_of_paralog_anno, p3.paralogous_var_align$paralog_data, b4.num_of_paralog_anno, b3.paralogous_var_align$paralog_data)
p.paralogous_var_align$Total_paralog_annotations
colnames(p.paralogous_var_align$Total_paralog_annotations)
View(p.paralogous_var_align$Total_paralog_annotations)
clinvar_genes_w_paralogs
"NMNAT1" %in% clinvar_genes_w_paralogs
"NMNAT1" %in% clinvar_genes_wo_paralogs
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tabliezed = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tabliezed_genes = as.vector(unique(clinvar_B_LB_tabliezed))
clinvar_B_LB_tabliezed_genes = as.vector(unique(clinvar_B_LB_tabliezed$SYMBOL))
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tabliezed = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tabliezed_genes = as.vector(unique(clinvar_B_LB_tabliezed$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paraogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tabliezed$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paraogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tabliezed$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paralogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tableized$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paralogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
source("src/Paralogous_var_align_functions.R")
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tableized$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paralogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
length(protein_genes_w_paralogues)
colnames(clinvar_P_LP_tableized)
getwd()
source("src/Paralogous_var_align_functions.R")
opts_knit$set(eval.after = 'fig.cap')
source("src/Paralogous_var_align_functions.R")
opts_knit$set(eval.after = 'fig.cap')
library(knitr)
#noQC
#pathogenic to pathogenic
p.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
# p.paralogous_var_align = Paralogous_var_align("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_20171029_onlyPathogenic.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_20171029_onlyPathogenic.out_paraloc_tableized")
#benign to pathogenic
b.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
#stats
conf = conf_matrix(p.paralogous_var_align$num_of_paralog_anno, p.paralogous_var_align$paralog_data, b.paralogous_var_align$num_of_paralog_anno, b.paralogous_var_align$paralog_data)
#para_con
p2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf2 = conf_matrix(p2.paralogous_var_align$num_of_paralog_anno, p2.paralogous_var_align$paralog_data, b2.paralogous_var_align$num_of_paralog_anno, b2.paralogous_var_align$paralog_data)
var_removed = var_rem_matrix(conf$con_table, conf2$con_table, p2.paralogous_var_align$paralog_data, b2.paralogous_var_align$paralog_data)
#all_con
p3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf3 = conf_matrix(p3.paralogous_var_align$num_of_paralog_anno, p3.paralogous_var_align$paralog_data, b3.paralogous_var_align$num_of_paralog_anno, b3.paralogous_var_align$paralog_data)
var_removed2 = var_rem_matrix(conf2$con_table, conf3$con_table, p3.paralogous_var_align$paralog_data, b3.paralogous_var_align$paralog_data)
#alt_con
#pathogenic to pathogenic
p4.Total_paralog_annotations = p3.paralogous_var_align$Total_paralog_annotations[p3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==p3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
# p4.Total_paralog_annotations = p4.Total_paralog_annotations[!duplicated(p4.Total_paralog_annotations$ID.x),]
p4.num_of_paralog_anno = sum(!is.na(p4.Total_paralog_annotations$ID.y))
#benign to pathogenic
b4.Total_paralog_annotations = b3.paralogous_var_align$Total_paralog_annotations[b3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==b3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
# b4.Total_paralog_annotations = b4.Total_paralog_annotations[!duplicated(b4.Total_paralog_annotations$ID.x),]
b4.num_of_paralog_anno = sum(!is.na(b4.Total_paralog_annotations$ID.y))
conf4 = conf_matrix(p4.num_of_paralog_anno, p3.paralogous_var_align$paralog_data, b4.num_of_paralog_anno, b3.paralogous_var_align$paralog_data)
var_removed3 = var_rem_matrix(conf3$con_table, conf4$con_table, p3.paralogous_var_align$paralog_data, b3.paralogous_var_align$paralog_data)
#Overall_table
Variant = c("Pathogenic variants","Benign variants","PPV","Sensitivity","P value")
Total = c(length(p.paralogous_var_align$paralog_data$ID),length(b.paralogous_var_align$paralog_data$ID),"NA","NA","NA")
Paralogue_Annotation_no_QC = c(format(conf$con_table[2], scientific = FALSE),format(conf$con_table[4], scientific = FALSE),conf$PPV,conf$Sensitivity,conf$Pvalue$p.value)
Variants_remaining_after_PA_QC1 = c(format(conf2$con_table[2], scientific = FALSE),format(conf2$con_table[4], scientific = FALSE),conf2$PPV, conf2$Sensitivity, conf2$Pvalue$p.value)
Variants_removed_after_PA_QC1 = c(var_removed$con_table[2],var_removed$con_table[4],var_removed$PPV,"NA",var_removed$Pvalue$p.value)
Variants_remaining_after_PA_QC2 = c(format(conf3$con_table[2], scientific = FALSE),format(conf3$con_table[4], scientific = FALSE),conf3$PPV,conf3$Sensitivity,conf3$Pvalue$p.value)
Variants_removed_after_PA_QC2 = c(var_removed2$con_table[2],var_removed2$con_table[4],var_removed2$PPV,"NA",var_removed2$Pvalue$p.value)
Variants_remaining_after_PA_QC3 = c(format(conf4$con_table[2], scientific = FALSE),format(conf4$con_table[4], scientific = FALSE),conf4$PPV,conf4$Sensitivity,conf4$Pvalue$p.value)
Variants_removed_after_PA_QC3 = c(var_removed3$con_table[2],var_removed3$con_table[4],var_removed3$PPV,"NA",var_removed3$Pvalue$p.value)
clinvar_set = data.frame(Variant,
Total,
Paralogue_Annotation_no_QC,
Variants_remaining_after_PA_QC1,
Variants_removed_after_PA_QC1,
Variants_remaining_after_PA_QC2,
Variants_removed_after_PA_QC2,
Variants_remaining_after_PA_QC3,
Variants_removed_after_PA_QC3
)
kable(clinvar_set)
conf$con_table
conf$con_table[2]
#pathogenic to benign
ptob.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
#benign to benign
btob.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
source("src/Paralogous_var_align_functions.R")
opts_knit$set(eval.after = 'fig.cap')
conf_b = conf_matrix_benign(ptob.paralogous_var_align$num_of_paralog_anno, ptob.paralogous_var_align$paralog_data, btob.paralogous_var_align$num_of_paralog_anno, btob.paralogous_var_align$paralog_data)
conf_b$con_table
conf$con_table
#pathogenic to benign
ptob.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
#benign to benign
btob.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
conf_b = conf_matrix_benign(ptob.paralogous_var_align$num_of_paralog_anno, ptob.paralogous_var_align$paralog_data, btob.paralogous_var_align$num_of_paralog_anno, btob.paralogous_var_align$paralog_data)
conf_b$con_table
conf$con_table
conf_b2 = conf_matrix_benign(ptob2.paralogous_var_align$num_of_paralog_anno, ptob2.paralogous_var_align$paralog_data, btob2.paralogous_var_align$num_of_paralog_anno, btob2.paralogous_var_align$paralog_data)
p2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
ptob2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
btob2.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.para_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
conf2 = conf_matrix(p2.paralogous_var_align$num_of_paralog_anno, p2.paralogous_var_align$paralog_data, b2.paralogous_var_align$num_of_paralog_anno, b2.paralogous_var_align$paralog_data)
conf_b2 = conf_matrix_benign(ptob2.paralogous_var_align$num_of_paralog_anno, ptob2.paralogous_var_align$paralog_data, btob2.paralogous_var_align$num_of_paralog_anno, btob2.paralogous_var_align$paralog_data)
conf_b2$con_table
conf_b$con_table
p3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
ptob3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
btob3.paralogous_var_align = Paralogous_var_align("data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.all_con", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized")
conf3 = conf_matrix(p3.paralogous_var_align$num_of_paralog_anno, p3.paralogous_var_align$paralog_data, b3.paralogous_var_align$num_of_paralog_anno, b3.paralogous_var_align$paralog_data)
conf_b3 = conf_matrix_benign(ptob3.paralogous_var_align$num_of_paralog_anno, ptob3.paralogous_var_align$paralog_data, btob3.paralogous_var_align$num_of_paralog_anno, btob3.paralogous_var_align$paralog_data)
conf_b3
conf_b3$con_table
conf_b2$con_table
conf_b1$con_table
conf_b$con_table
conf_b$Pvalue$p.value
conf$Pvalue$p.value
conf_b2$Pvalue$p.value
conf_b3$Pvalue$p.value
x = matrix(c(nrow(p.paralogous_var_align$paralog_data),p.paralogous_var_align$num_of_paralog_anno,nrow(b.paralogous_var_align$paralog_data), b.paralogous_var_align$num_of_paralog_anno), ncol=2)
x
x = matrix(c(nrow(p.paralogous_var_align$paralog_data)-p.paralogous_var_align$num_of_paralog_anno,p.paralogous_var_align$num_of_paralog_anno,nrow(b.paralogous_var_align$paralog_data)-b.paralogous_var_align$num_of_paralog_anno, b.paralogous_var_align$num_of_paralog_anno), ncol=2)
x
22583-17477
fisher.test(x)
y = fisher.test(x)
y$p.value
x = matrix(c(nrow(ptob.paralogous_var_align$paralog_data)-ptob.paralogous_var_align$num_of_paralog_anno,ptob.paralogous_var_align$num_of_paralog_anno,nrow(btob.paralogous_var_align$paralog_data)-btob.paralogous_var_align$num_of_paralog_anno, btob.paralogous_var_align$num_of_paralog_anno), ncol=2)
x
y = fisher.test(x)
y$p.value
conf_b$Pvalue$p.value
conf_b$con_table
conf_b2$con_table
conf_b3$con_table
conf$con_table
conf2$con_table
conf3$con_table
conf_b$PPV
conf_b$Sensitivity
conf$PPV
conf_b2$PPV
conf_b3$PPV
#pathogenic to benign
ptob4.Total_paralog_annotations = ptob3.paralogous_var_align$Total_paralog_annotations[ptob3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==ptob3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
ptob4.num_of_paralog_anno = sum(!is.na(ptob4.Total_paralog_annotations$ID.y))
ptob4.Total_paralog_annotations = ptob3.paralogous_var_align$Total_paralog_annotations[ptob3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==ptob3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
ptob4.num_of_paralog_anno = sum(!is.na(ptob4.Total_paralog_annotations$ID.y))
#benign to benign
btob4.Total_paralog_annotations = btob3.paralogous_var_align$Total_paralog_annotations[btob3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.x==btob3.paralogous_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
btob4.num_of_paralog_anno = sum(!is.na(btob4.Total_paralog_annotations$ID.y))
conf_b4 = conf_matrix_benign(ptob4.num_of_paralog_anno, ptob3.paralogous_var_align$paralog_data, btob4.num_of_paralog_anno, btob3.paralogous_var_align$paralog_data)
conf_b4$con_table
conf_b3$con_table
conf$con_table
rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")
rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")
rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")
getwd()
setwd("/media/nick/Data/Users/N/Documents/PhD/Paralogues/ParalogueAnnotation_personal")
getwd()
rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")
install.packages("XML")
install.packages("DiagrammeR")
library(DiagrammeR)
pipeline = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'VEP_ParalogAnno.py'; 'File_prep_for_R.py'; 'Tableize_wrapper.py'; 'R markdown'
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'vcf input file'; 'paralogs file'; 'paraloc file'; 'paralogs2 file'; 'paraloc_tableized file'
'vcf input file' -> 'VEP_ParalogAnno.py'; 'VEP_ParalogAnno.py' -> 'paralogs file'; 'VEP_ParalogAnno.py' -> 'paraloc file'; 'paralogs file' -> 'File_prep_for_R.py'; 'paraloc file' -> 'Tableize_wrapper.py'; 'File_prep_for_R.py' -> 'paralogs2 file'; 'Tableize_wrapper.py' -> 'paraloc_tableized file'; 'paralogs2 file' -> 'R markdown'; 'paraloc_tableized file' -> 'R markdown'
}")
pipeline
source("src/Paralogous_var_align_functions.R")
install.packages("tidyverse")
install.packages("httr")
install.packages("openssl")
install.packages("openssl")
install.packages("openssl")
install.packages("openssl")
install.packages("httr")
install.packages("httr")
install.packages("tidyverse")
source("src/Paralogous_var_align_functions.R")
install.packages("ggsignif")
source("src/Paralogous_var_align_functions.R")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("biomaRr")
BiocManager::install("biomaRt")
source("src/Paralogous_var_align_functions.R")
install.packages("png")
source("src/Paralogous_var_align_functions.R")
install.packages("pander")
source("src/Paralogous_var_align_functions.R")
install.packages("kableExtra")
source("src/Paralogous_var_align_functions.R")
BiocManager::install("clusterProfiler")
install.packages("ggraph")
install.packages("units")
install.packages("units")
install.packages("ggraph")
BiocManager::install("clusterProfiler")
source("src/Paralogous_var_align_functions.R")
source("src/Paralogous_var_align_functions.R")
BiocManager::install("org.Hs.eg.db")
source("src/Paralogous_var_align_functions.R")
