#benign to pathogenic
b.paraz_var_align = ParaZ_var_align(i,"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
paraz.conf = conf_matrix(p.paraz_var_align$num_of_paralog_anno, p.paraz_var_align$paralog_data, b.paraz_var_align$num_of_paralog_anno, b.paraz_var_align$paralog_data)
Sensitivity_list = c(Sensitivity_list, paraz.conf$Sensitivity)
FPR_list = c(FPR_list, paraz.conf$FPR)
con_table_list = rbind(con_table_list, paraz.conf$con_table)
}
roc_data = do.call(rbind, Map(data.frame, Sensitivity = Sensitivity_list, FPR = FPR_list, cutoff = seq(0,11)))
gg = ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,1) + ylim(0,1)
gg = gg + geom_abline(intercept = 0, slope = 1, linetype = "dotted")
gg = ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,0.25) + ylim(0.7,1)
gg
con_table_list
roc_data
gg = ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,1) + ylim(0,1)
gg = gg + geom_abline(intercept = 0, slope = 1, linetype = "dotted")
gg
gg = ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,0.25) + ylim(0.7,1)
gg
gg = ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,1) + ylim(0,1)
gg = gg + geom_abline(intercept = 0, slope = 1, linetype = "dotted")
gg
p.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
source("src/Paralogous_var_align_functions.R")
#noQC
p.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf = conf_matrix(p.sarco_var_align$num_of_paralog_anno, p.sarco_var_align$paralog_data, b.sarco_var_align$num_of_paralog_anno, b.sarco_var_align$paralog_data)
#para_con
p2.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.para_con", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b2.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.para_con", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf2 = conf_matrix(p2.sarco_var_align$num_of_paralog_anno, p2.sarco_var_align$paralog_data, b2.sarco_var_align$num_of_paralog_anno, b2.sarco_var_align$paralog_data)
#all_con
p3.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.all_con", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
b3.sarco_var_align = Subset_var_align(c("MYH7","MYBPC3","TNNT2","TPM1","MYL2","MYL3","TNNI3","ACTC1"),"/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.all_con", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
conf3 = conf_matrix(p3.sarco_var_align$num_of_paralog_anno, p3.sarco_var_align$paralog_data, b3.sarco_var_align$num_of_paralog_anno, b3.sarco_var_align$paralog_data)
#alt_con
#pathogenic to pathogenic
p4.Total_paralog_annotations = p3.sarco_var_align$Total_paralog_annotations[p3.sarco_var_align$Total_paralog_annotations$ALT_Amino_acids.x==p3.sarco_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
# p4.Total_paralog_annotations = p4.Total_paralog_annotations[!duplicated(p4.Total_paralog_annotations$ID.x),]
p4.num_of_paralog_anno = sum(!is.na(p4.Total_paralog_annotations$ID.y))
#benign to pathogenic
b4.Total_paralog_annotations = b3.sarco_var_align$Total_paralog_annotations[b3.sarco_var_align$Total_paralog_annotations$ALT_Amino_acids.x==b3.sarco_var_align$Total_paralog_annotations$ALT_Amino_acids.y,]
# b4.Total_paralog_annotations = b4.Total_paralog_annotations[!duplicated(b4.Total_paralog_annotations$ID.x),]
b4.num_of_paralog_anno = sum(!is.na(b4.Total_paralog_annotations$ID.y))
conf4 = conf_matrix(p4.num_of_paralog_anno, p3.sarco_var_align$paralog_data, b4.num_of_paralog_anno, b3.sarco_var_align$paralog_data)
conf$con_table
conf2$con_table
conf3$con_table
conf3$con_table[2]
conf3$con_table[1]
conf3$con_table[3]
source("src/Paralogous_var_align_functions.R")
#case data VEP
case.paralogous_var_align = Paralogous_var_align("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/remapped_HCM_missense_LMM_OMGL_chr_wRefAl.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/remapped_HCM_missense_LMM_OMGL_chr_wRefAl.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
patho_case_var = case.paralogous_var_align$Total_paralog_annotations[!is.na(case.paralogous_var_align$Total_paralog_annotations$ID.y),]
patho_case_var_IDs = patho_case_var$ID.x
patho_case_var_IDs
# write(patho_case_var_IDs, file = "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/patho_case_var_IDs.txt", sep = "\t", ncolumns = 1)
case.data = read.csv("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/HCM_missense_LMM_OMGL_chr.csv", sep = ",")
patho_case.data = case.data[case.data$mut_id %in% patho_case_var_IDs]
patho_case.data = case.data[case.data$mut_id %in% patho_case_var_IDs,]
View(patho_case.data)
length(patho_case_var_IDs)
# write(patho_control_var_IDs, file = "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/patho_control_var_IDs.txt", sep = "\t", ncolumns = 1)
control.data = read.csv("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/ExAC_missense_sarcomeric_chr.csv", sep = ",")
#control data VEP
control.paralogous_var_align = Paralogous_var_align("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/remapped_ExAC_missense_sarcomeric_chr_wRefAl.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/remapped_ExAC_missense_sarcomeric_chr_wRefAl.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
#control data VEP
control.paralogous_var_align = Paralogous_var_align("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/remapped_ExAC_missense_sarcomeric_chr_wRefAl.out_paraloc_paralogs2.noQC", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/remapped_ExAC_missense_sarcomeric_chr_wRefAl.out_paraloc_tableized", "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
patho_control_var = control.paralogous_var_align$Total_paralog_annotations[!is.na(control.paralogous_var_align$Total_paralog_annotations$ID.y),]
patho_control_var_IDs = patho_control_var$ID.x
patho_control_var_IDs = patho_control_var$ID.x
# write(patho_control_var_IDs, file = "/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/patho_control_var_IDs.txt", sep = "\t", ncolumns = 1)
control.data = read.csv("/media/nick/Data/Users/N/Documents/PhD/Paralogues/data_files/case_controls/ExAC_missense_sarcomeric_chr.csv", sep = ",")
patho_control.data = control.data[control.data$mut_id %in% patho_control_var_IDs]
patho_control.data = control.data[control.data$mut_id %in% patho_control_var_IDs,]
View(patho_control.data)
case_cases = sum(patho_case.data$sum.vs_case_count.)
case_cases
Total_cases = sum(case.data$sum.vs_case_count.)
Total_cases
Total_case_cases = sum(case.data$sum.vs_case_count.)
Total_control_cases = sum(control.data$mut_exac_count)
Total_case_cases
Total_control_cases
control_cases = sum(patho_control.data$mut_exac_count)
control_cases
1834-39
3267+2912
3267+2912+1315
library(DiagrammeR)
pipeline = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'VEP_ParalogAnno.py'; 'File_prep_for_R.py'; 'Tableize_wrapper.py'; 'R markdown'
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'vcf input file'; 'paralogs file'; 'paraloc file'; 'paralogs2 file'; 'paraloc_tableized file'
'vcf input file' -> 'VEP_ParalogAnno.py'; 'VEP_ParalogAnno.py' -> 'paralogs file'; 'VEP_ParalogAnno.py' -> 'paraloc file'; 'paralogs file' -> 'File_prep_for_R.py'; 'paraloc file' -> 'Tableize_wrapper.py'; 'File_prep_for_R.py' -> 'paralogs2 file'; 'Tableize_wrapper.py' -> 'paraloc_tableized file'; 'paralogs2 file' -> 'R markdown'; 'paraloc_tableized file' -> 'R markdown'
}")
pipeline
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'Total 38'; 'RBH cluster: 9'; 'Imperial HPC'; 'CX2: 9'; 'CX1(array): 10'; 'AX4(array): 10'
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH cluster: 9'; 'Total 38' -> 'Imperial HPC'; 'RBH cluster: 9' -> '1-9'; 'Imperial HPC' -> 'CX1(array): 10'; 'CX1(array): 10' -> '10-19'; 'Imperial HPC' -> 'AX4(array): 10'; 'AX4(array): 10' -> '20-29'; 'Imperial HPC' -> 'CX2: 9'; 'CX2: 9' -> '30-38'
}")
pipeline
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'Total 38'; 'RBH cluster: 9'; 'Imperial HPC'; 'CX2: 9'; 'CX1(array): 10'; 'AX4(array): 10'
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH cluster: 9'; 'Total 38' -> 'Imperial HPC'; 'RBH cluster: 9' -> '1-9'; 'Imperial HPC' -> 'CX1(array): 10'; 'CX1(array): 10' -> '10-19'; 'Imperial HPC' -> 'AX4(array): 10'; 'AX4(array): 10' -> '20-29'; 'Imperial HPC' -> 'CX2: 9'; 'CX2: 9' -> '30-38'
}")
Gnomad_dataset_split
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'RBH cluster: 9'; 'Imperial HPC'; 'CX2: 9'; 'CX1(array): 10'; 'AX4(array): 10'
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'Total 38'; '1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH cluster: 9'; 'Total 38' -> 'Imperial HPC'; 'RBH cluster: 9' -> '1-9'; 'Imperial HPC' -> 'CX1(array): 10'; 'CX1(array): 10' -> '10-19'; 'Imperial HPC' -> 'AX4(array): 10'; 'AX4(array): 10' -> '20-29'; 'Imperial HPC' -> 'CX2: 9'; 'CX2: 9' -> '30-38'
}")
Gnomad_dataset_split
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'RBH cluster: 9'; 'Imperial HPC: 29'; 'CX1(array): 19'; 'AX4(array): 10';
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'Total 38'; '1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH cluster: 9'; 'Total 38' -> 'Imperial HPC: 29'; 'RBH cluster: 9' -> '1-9'; 'Imperial HPC: 29' -> 'CX1(array): 19'; 'CX1(array): 19' -> '10-19'; 'Imperial HPC: 29' -> 'AX4(array): 10'; 'AX4(array): 10' -> '20-29'; 'CX1(array): 19' -> '30-38'
}")
Gnomad_dataset_split
source('/media/nick/Data/Users/N/Documents/PhD/Comp_bio_week/ChIP-seq_packages_PlusRNAseqStat_PlusBioC.R', echo=TRUE)
source('/media/nick/Data/Users/N/Documents/PhD/Comp_bio_week/ChIP-seq_packages_PlusRNAseqStat_PlusBioC.R', echo=TRUE)
?rm
install.packages("ggplot2")
install.packages("yaml")
install.packages("yaml")
install.packages("gtools")
install.packages("rjson")
install.packages("RSQLite")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("XML")
install.packages("stringi")
install.packages("survival")
install.packages("survival")
source("https://bioconductor.org/biocLite.R")
biocLite("GenomeInfoDb")
biocLite("DelayedArray")
biocLite("SummarizedExperiment")
biocLite("DiffBind")
biocLite("ChIPQC")
biocLite("rGREAT")
biocLite("org.Mm.eg.db")
biocLite("ChIPseeker")
biocLite("KEGG.db")
biocLite("goseq")
biocLite()
biocLite("BSgenome.Mmusculus.UCSC.mm9")
biocLite("BSgenome.Mmusculus.UCSC.mm10")
biocLite("AnnotationHub")
biocLite("TxDb.Mmusculus.UCSC.mm9.knownGene")
biocLite("TxDb.Mmusculus.UCSC.mm10.knownGene")
biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene")
# for statistics in R
install.packages("vioplot")
# for RNAseq
install.packages("pheatmap")
install.packages("gplots")
biocLite("edgeR")
biocLite("DESeq2")
biocLite("RColorBrewer")
biocLite("ggplot2")
biocLite("biomaRt")
library("biomaRt", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:biomaRt", unload=TRUE)
library("biomaRt", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:biomaRt", unload=TRUE)
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'RBH\ncluster: 9'; 'Imperial\nHPC: 29'; 'CX1\n(array): 19'; 'AX4\n(array): 10';
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'Total 38'; '1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH cluster: 9'; 'Total 38' -> 'Imperial HPC: 29'; 'RBH cluster: 9' -> '1-9'; 'Imperial HPC: 29' -> 'CX1(array): 19'; 'CX1(array): 19' -> '10-19'; 'Imperial HPC: 29' -> 'AX4(array): 10'; 'AX4(array): 10' -> '20-29'; 'CX1(array): 19' -> '30-38'
}")
Gnomad_dataset_split
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'RBH"\n"cluster: 9'; 'Imperial"\n"HPC: 29'; 'CX1"\n"(array): 19'; 'AX4"\n"(array): 10';
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'RBH \n cluster: 9'; 'Imperial \n HPC: 29'; 'CX1 \n (array): 19'; 'AX4 \n (array): 10';
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'Total 38'; '1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH cluster: 9'; 'Total 38' -> 'Imperial HPC: 29'; 'RBH cluster: 9' -> '1-9'; 'Imperial HPC: 29' -> 'CX1(array): 19'; 'CX1(array): 19' -> '10-19'; 'Imperial HPC: 29' -> 'AX4(array): 10'; 'AX4(array): 10' -> '20-29'; 'CX1(array): 19' -> '30-38'
}")
Gnomad_dataset_split
library(DiagrammeR)
Gnomad_dataset_split = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'RBH\ncluster: 9'; 'Imperial\nHPC: 29'; 'CX1\n(array): 19'; 'AX4\n(array): 10';
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'Total 38'; '1-9'; '10-19'; '20-29'; '30-38'
'Total 38' -> 'RBH\ncluster: 9'; 'Total 38' -> 'Imperial\nHPC: 29'; 'RBH\ncluster: 9' -> '1-9'; 'Imperial\nHPC: 29' -> 'CX1\n(array): 19'; 'CX1\n(array): 19' -> '10-19'; 'Imperial\nHPC: 29' -> 'AX4\n(array): 10'; 'AX4\n(array): 10' -> '20-29'; 'CX1\n(array): 19' -> '30-38'
}")
Gnomad_dataset_split
library(DiagrammeR)
pipeline = DiagrammeR::grViz("
digraph boxes_and_circles {
graph [overlap = true, fontsize = 10]
node [shape = plaintext, fillcolor = green, style=filled, fixedsize=false]
'VEP_ParalogAnno.py'; 'File_prep_for_R.py'; 'Tableize_wrapper.py'; 'R markdown'
node [shape = plaintext, fillcolor = orange, style=filled, fixedsize=false]
'vcf input file'; 'paralogs file'; 'paraloc file'; 'paralogs2 file'; 'paraloc_tableized file'
'vcf input file' -> 'VEP_ParalogAnno.py'; 'VEP_ParalogAnno.py' -> 'paralogs file'; 'VEP_ParalogAnno.py' -> 'paraloc file'; 'paralogs file' -> 'File_prep_for_R.py'; 'paraloc file' -> 'Tableize_wrapper.py'; 'File_prep_for_R.py' -> 'paralogs2 file'; 'Tableize_wrapper.py' -> 'paraloc_tableized file'; 'paralogs2 file' -> 'R markdown'; 'paraloc_tableized file' -> 'R markdown'
}")
pipeline
`rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")`
getwd()
setwd("/media/nick/Data/Users/N/Documents/PhD/Paralogues/ParalogueAnnotation_personal")
`rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")`
dir()
rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")
setwd("/media/nick/Data/Users/N/Documents/PhD/Paralogues/ParalogueAnnotation_personal")
rmarkdown::render("Paralog_annotation.Rmd", output_format = "all")
?matrix()
con_table_list = matrix(, ncol = 2)
con_table
con_table_list
gg
ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,0.04) + ylim(0.3,0.7) + scale_color_gradient(low="blue", high="red", limits=c(0, 11))
Sensitivity_list = vector()
FPR_list = vector()
con_table_list = matrix(, ncol = 2)
for (i in seq(0,11)){
#noQC
#pathogenic to pathogenic
p.paraz_var_align = ParaZ_var_align(i,"data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
#benign to pathogenic
b.paraz_var_align = ParaZ_var_align(i,"data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
paraz.conf = conf_matrix(p.paraz_var_align$num_of_paralog_anno, p.paraz_var_align$paralog_data, b.paraz_var_align$num_of_paralog_anno, b.paraz_var_align$paralog_data)
Sensitivity_list = c(Sensitivity_list, paraz.conf$Sensitivity)
FPR_list = c(FPR_list, paraz.conf$FPR)
con_table_list = rbind(con_table_list, paraz.conf$con_table)
}
source("src/Paralogous_var_align_functions.R")
Sensitivity_list = vector()
FPR_list = vector()
con_table_list = matrix(, ncol = 2)
for (i in seq(0,11)){
#noQC
#pathogenic to pathogenic
p.paraz_var_align = ParaZ_var_align(i,"data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
#benign to pathogenic
b.paraz_var_align = ParaZ_var_align(i,"data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_paralogs2.noQC", "data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", "data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized")
paraz.conf = conf_matrix(p.paraz_var_align$num_of_paralog_anno, p.paraz_var_align$paralog_data, b.paraz_var_align$num_of_paralog_anno, b.paraz_var_align$paralog_data)
Sensitivity_list = c(Sensitivity_list, paraz.conf$Sensitivity)
FPR_list = c(FPR_list, paraz.conf$FPR)
con_table_list = rbind(con_table_list, paraz.conf$con_table)
}
roc_data = do.call(rbind, Map(data.frame, Sensitivity = Sensitivity_list, FPR = FPR_list, cutoff = seq(0,11)))
gg = ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,1) + ylim(0,1)
gg = gg + geom_abline(intercept = 0, slope = 1, linetype = "dotted")
ggplot(roc_data, aes(x=FPR, y=Sensitivity, colour = cutoff)) + geom_point() + xlim(0,0.04) + ylim(0.3,0.7) + scale_color_gradient(low="blue", high="red", limits=c(0, 11))
102435 - 28732
protein_genes_w_paralogues_genes
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues_genes = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tableized$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paralogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
clinvar_P_LP_variants_wo_paralogs = vector()
for (variant in clinvar_P_LP_tableized$SYMBOL){
if (variant %in% protein_genes_wo_paralogues_genes){
clinvar_P_LP_variants_wo_paralogs = c(variant, clinvar_P_LP_variants_wo_paralogs)
}
}
protein_genes_w_paralogues_genes
protein_genes_w_paralogues
?spread()
colnames(protein_genes_w_paralogues)
# length(protein_genes_w_paralogues)
protein_genes_w_paralogues_wide = spread(protein_genes_w_paralogues, value = hsapiens_paralog_associated_gene_name)
# length(protein_genes_w_paralogues)
protein_genes_w_paralogues_wide = spread(protein_genes_w_paralogues, key = "paralogues", value = hsapiens_paralog_associated_gene_name)
count(protein_genes_w_paralogues, external_gene_name)
View(protein_genes_w_paralogues)
# length(protein_genes_w_paralogues)
protein_genes_w_paralogues_wide = count(protein_genes_w_paralogues, external_gene_name)
View(protein_genes_w_paralogues_wide)
View(protein_genes_w_paralogues)
colnames(protein_genes_w_paralogues_wide)
colnames(protein_genes_w_paralogues_wide)[2]
colnames(protein_genes_w_paralogues_wide)[2] = "number of paralogues"
density(protein_genes_w_paralogues_wide)
colnames(protein_genes_w_paralogues_wide)[2] = "number_of_paralogues"
count(protein_genes_w_paralogues_wide, number_of_paralogues)
protein_genes_w_paralogues_wide = count(protein_genes_w_paralogues_wide, number_of_paralogues)
density(protein_genes_w_paralogues_wide)
?density
mtcars$mpg
protein_genes_w_paralogues_wide = count(protein_genes_w_paralogues, external_gene_name)
colnames(protein_genes_w_paralogues_wide)[2] = "number_of_paralogues"
density(protein_genes_w_paralogues_wide$number_of_paralogues)
plot(density(protein_genes_w_paralogues_wide$number_of_paralogues))
plot(hist(protein_genes_w_paralogues_wide$number_of_paralogues))
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues_genes = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
protein_genes_wo_paralogues_wide = count(protein_genes_wo_paralogues, external_gene_name)
colnames(protein_genes_wo_paralogues_wide)[2] = "number_of_paralogues"
plot(hist(protein_genes_wo_paralogues_wide$number_of_paralogues))
plot(hist(protein_genes_wo_paralogues_wide$number_of_paralogues))
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues_genes = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
protein_genes_wo_paralogues_wide = count(protein_genes_wo_paralogues, external_gene_name)
colnames(protein_genes_wo_paralogues_wide)[2] = "number_of_paralogues"
plot(hist(protein_genes_wo_paralogues_wide$number_of_paralogues))
protein_genes_wo_paralogues
protein_genes_wo_paralogues_wide
View(protein_genes_wo_paralogues_wide)
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_w_paralogues_wide = count(protein_genes_w_paralogues, external_gene_name)
colnames(protein_genes_w_paralogues_wide)[2] = "number_of_paralogues"
plot(hist(protein_genes_w_paralogues_wide$number_of_paralogues))
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues_genes = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tableized$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paralogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
clinvar_P_LP_variants_wo_paralogs = vector()
for (variant in clinvar_P_LP_tableized$SYMBOL){
if (variant %in% protein_genes_wo_paralogues_genes){
clinvar_P_LP_variants_wo_paralogs = c(variant, clinvar_P_LP_variants_wo_paralogs)
}
}
ensembl = useMart("ENSEMBL_MART_ENSEMBL", host = "jul2018.archive.ensembl.org")
ens_human <- useDataset("hsapiens_gene_ensembl",mart=ensembl)
protein_genes_w_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", TRUE), mart = ens_human)
protein_genes_w_paralogues_genes = as.vector(unique(protein_genes_w_paralogues$external_gene_name))
# length(protein_genes_w_paralogues)
protein_genes_w_paralogues_wide = count(protein_genes_w_paralogues, external_gene_name)
colnames(protein_genes_w_paralogues_wide)[2] = "number_of_paralogues"
hist(protein_genes_w_paralogues_wide$number_of_paralogues)
protein_genes_wo_paralogues = getBM(attributes = c("external_gene_name", "hsapiens_paralog_associated_gene_name"), filters = c("biotype", "with_hsapiens_paralog"), values = list("protein_coding", FALSE), mart = ens_human)
protein_genes_wo_paralogues_genes = as.vector(unique(protein_genes_wo_paralogues$external_gene_name))
# length(protein_genes_wo_paralogues)
#testing to see how many genes in the clinvar dataset have paralogues
clinvar_P_LP_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Pathogenic_and_LikelyPathogenic.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_P_LP_tableized_genes = as.vector(unique(clinvar_P_LP_tableized$SYMBOL))
clinvar_B_LB_tableized = read.csv(file="data/clinvar/clinvar_alleles.single.b38.Benign_and_LikelyBenign.out_paraloc_tableized", sep = "\t", header=TRUE, stringsAsFactors=FALSE)
clinvar_B_LB_tableized_genes = as.vector(unique(clinvar_B_LB_tableized$SYMBOL))
clinvar_P_LP_genes_w_paralogs = vector()
clinvar_P_LP_genes_wo_paralogs = vector()
clinvar_B_LB_genes_w_paralogs = vector()
clinvar_B_LB_genes_wo_paralogs= vector()
for (gene in clinvar_P_LP_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_P_LP_genes_w_paralogs = c(gene, clinvar_P_LP_genes_w_paralogs)
} else {
clinvar_P_LP_genes_wo_paralogs = c(gene, clinvar_P_LP_genes_wo_paralogs)
}
}
for (gene in clinvar_B_LB_tableized_genes){
# print(gene)
if (gene %in% protein_genes_w_paralogues_genes){
clinvar_B_LB_genes_w_paralogs = c(gene, clinvar_B_LB_genes_w_paralogs)
} else {
clinvar_B_LB_genes_wo_paralogs = c(gene, clinvar_B_LB_genes_wo_paralogs)
}
}
clinvar_P_LP_variants_wo_paralogs = vector()
for (variant in clinvar_P_LP_tableized$SYMBOL){
if (variant %in% protein_genes_wo_paralogues_genes){
clinvar_P_LP_variants_wo_paralogs = c(variant, clinvar_P_LP_variants_wo_paralogs)
}
}
?hist()
seq(0,50,5)
hist(protein_genes_w_paralogues_wide$number_of_paralogues, breaks = seq(0,50,5))
plot(hist(protein_genes_w_paralogues_wide$number_of_paralogues, breaks = seq(0,50,5)))
plot(hist(protein_genes_w_paralogues_wide$number_of_paralogues, breaks = seq(0,50,2)))
plot(hist(protein_genes_w_paralogues_wide$number_of_paralogues, breaks = seq(0,50,1)))
density(protein_genes_w_paralogues$external_gene_name)
density(protein_genes_w_paralogues_wide$number_of_paralogues)
plot(density(protein_genes_w_paralogues_wide$number_of_paralogues))
mean(protein_genes_w_paralogues_wide$number_of_paralogues)
sd(protein_genes_w_paralogues_wide$number_of_paralogues)
?sd
min(protein_genes_w_paralogues_wide$number_of_paralogues)
?mean
?round
round(mean(protein_genes_w_paralogues_wide$number_of_paralogues))
round(mean(protein_genes_w_paralogues_wide$number_of_paralogues), 2)
round(mean(protein_genes_w_paralogues_wide$number_of_paralogues), 3)
length(protein_genes_wo_paralogues_genes)
length(protein_genes_w_paralogues_genes)
clinvar_P_LP_genes_w_paralogs
?subset
protein_genes_w_paralogues_wide[protein_genes_w_paralogues_wide$external_gene_name %in% clinvar_P_LP_genes_w_paralogs,]
length(clinvar_P_LP_genes_w_paralogs)
length(protein_genes_w_paralogues_wide[protein_genes_w_paralogues_wide$external_gene_name %in% clinvar_P_LP_genes_w_paralogs,]$external_gene_name)
hist(protein_genes_w_paralogues_wide$number_of_paralogues, breaks = seq(0,50,1))
plot(hist(protein_genes_w_paralogues_wide$number_of_paralogues, breaks = seq(0,50,1)))
clinvar_P_LP_genes_wo_paralogs = protein_genes_w_paralogues_wide[protein_genes_w_paralogues_wide$external_gene_name %in% clinvar_P_LP_genes_w_paralogs,]
hist(clinvar_P_LP_genes_wo_paralogs$number_of_paralogues, breaks = seq(0,50,1))
plot(hist(clinvar_P_LP_genes_wo_paralogs$number_of_paralogues, breaks = seq(0,50,1)))
clinvar_B_LB_variants_wo_paralogs = vector()
for (variant in clinvar_B_LB_tableized$SYMBOL){
if (variant %in% protein_genes_wo_paralogues_genes){
clinvar_B_LB_variants_wo_paralogs = c(variant, clinvar_B_LB_variants_wo_paralogs)
}
}
clinvar_B_LB_variants_wo_paralogs
clinvar_B_LB_variants_wo_paralogs = vector()
for (variant in clinvar_B_LB_tableized$SYMBOL){
if (variant %in% protein_genes_wo_paralogues_genes){
clinvar_B_LB_variants_wo_paralogs = c(variant, clinvar_B_LB_variants_wo_paralogs)
}
}
clinvar_B_LB_variants_wo_paralogs
length(clinvar_P_LP_variants_wo_paralogs)
length(unique(clinvar_P_LP_variants_wo_paralogs))
clinvar_P_LP_genes_w_paralogs_wide = protein_genes_w_paralogues_wide[protein_genes_w_paralogues_wide$external_gene_name %in% clinvar_P_LP_genes_w_paralogs,]
hist(clinvar_P_LP_genes_w_paralogs_wide$number_of_paralogues, breaks = seq(0,50,1))
clinvar_P_LP_genes_w_paralogs_wide
round(mean(clinvar_P_LP_genes_w_paralogs_wide$number_of_paralogues), 3)
round(sd(clinvar_P_LP_genes_w_paralogs_wide$number_of_paralogues), 3)
mean(clinvar_P_LP_genes_w_paralogs_wide$number_of_paralogues)
max(clinvar_P_LP_genes_w_paralogs_wide$number_of_paralogues)
